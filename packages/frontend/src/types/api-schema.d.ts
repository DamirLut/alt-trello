/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/auth/vk': {
    get: operations['AuthController_authVk'];
  };
  '/api/auth/google': {
    get: operations['AuthController_authGoogle'];
  };
  '/api/auth/logout': {
    post: operations['AuthController_logout'];
  };
  '/api/user': {
    get: operations['UserController_getSelf'];
  };
  '/api/utils': {
    get: operations['UtilsController_getOAuthList'];
  };
  '/api/boards/new': {
    post: operations['BoardController_createBoard'];
  };
  '/api/boards/list': {
    get: operations['BoardController_getUserList'];
  };
  '/api/boards': {
    get: operations['BoardController_getBoardById'];
  };
  '/api/columns/new': {
    post: operations['ColumnController_newColumn'];
  };
  '/api/cards/new': {
    post: operations['CardController_create'];
  };
  '/api/cards': {
    get: operations['CardController_getCards'];
  };
  '/api/cards/move': {
    patch: operations['CardController_moveCard'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserEntity: {
      id: number;
      /** Format: date-time */
      lastActiveAt: string;
      username: string;
      avatar: string;
    };
    AuthMethodDTO: {
      /** @enum {string} */
      type: 'vk' | 'google';
      redirect_url: string;
    };
    AuthMethodsDTO: {
      items: components['schemas']['AuthMethodDTO'][];
    };
    CreateBoardDTO: {
      title: string;
      color: string;
    };
    BoardThemeSetting: {
      color: string;
    };
    BoardSetting: {
      theme: components['schemas']['BoardThemeSetting'];
    };
    BoardSettingEntity: {
      data: components['schemas']['BoardSetting'];
    };
    CardEntity: {
      id: number;
      title: string;
      /** @example awesome-task */
      slug: string;
      column: number;
      position: number;
    };
    ColumnEntity: {
      id: number;
      /** @example TODO */
      title: string;
      board: string;
      position: number;
      cards: components['schemas']['CardEntity'][];
    };
    BoardEntity: {
      /** @example fxrJQl4u */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example My Board */
      title: string;
      /** @example 1 */
      owner: number;
      /** @example my-board */
      slug: string;
      settings: components['schemas']['BoardSettingEntity'];
      columns: components['schemas']['ColumnEntity'][];
    };
    CreateColumnDTO: {
      board_id: string;
      title: string;
    };
    CreateCardDTO: {
      board_id: string;
      column_id: number;
      title: string;
    };
    MoveCardDTO: {
      board_id: string;
      target_column: number;
      card_id: number;
      position: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  AuthController_authVk: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_authGoogle: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_logout: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_getSelf: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserEntity'];
        };
      };
    };
  };
  UtilsController_getOAuthList: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AuthMethodsDTO'];
        };
      };
    };
  };
  BoardController_createBoard: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBoardDTO'];
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['BoardEntity'];
        };
      };
    };
  };
  BoardController_getUserList: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['BoardEntity'][];
        };
      };
    };
  };
  BoardController_getBoardById: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['BoardEntity'];
        };
      };
    };
  };
  ColumnController_newColumn: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateColumnDTO'];
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ColumnEntity'];
        };
      };
    };
  };
  CardController_create: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCardDTO'];
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CardEntity'];
        };
      };
    };
  };
  CardController_getCards: {
    parameters: {
      query: {
        board_id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CardEntity'][];
        };
      };
    };
  };
  CardController_moveCard: {
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveCardDTO'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CardEntity'];
        };
      };
    };
  };
}
